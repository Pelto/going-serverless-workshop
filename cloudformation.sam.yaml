AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Rock Paper Scissors stack.
Resources:
  GetGamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: .
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Events:
        GetGame:
          Type: Api
          Properties:
            Method: get
            Path: /games/{gameId}


  CreateGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: .
      Policies:
       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
       - Ref: ReadGamesPolicy
      Events:
        CreateGame:
          Type: Api
          Properties:
            Method: post
            Path: /games


  MakeMoveFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: .
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: ReadGamesPolicy
        - Ref: WriteGamesPolicy
      Events:
        MakeMove:
          Type: Api
          Properties:
            Method: post
            Path: /moves


  GetLeaderboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: .
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: ReadScorePolicy
      Events:
        Leaderboard:
          Type: Api
          Properties:
            Method: get
            Path: /leaderboard


  UpdateLeaderboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: lambdas/update-leaderboard/
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: ReadGameStreamPolicy
        - Ref: WriteScorePolicy
      Environment:
        Variables:
          SCORE_TABLE: !Ref ScoreTable
      Events:
        GameEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt GamesTable.StreamArn
            StartingPosition: LATEST


  GamesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "GameId"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "GameId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"
      TimeToLiveSpecification:
        AttributeName: "TimeToLive"
        Enabled: true


  ScoreTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "PlayerId"
          AttributeType: "S"
        - AttributeName: "Score"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "PlayerId"
          KeyType: "HASH"
        - AttributeName: "Score"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1


  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html


  ReadGamesPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Provide read access to the Games table
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "dynamodb:GetItem"
            Resource: !GetAtt GamesTable.Arn


  WriteGamesPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Provide write access to the Games table
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource: !GetAtt GamesTable.Arn


  ReadGameStreamPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Provide read access to the Score table stream
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:DescribeStream"
              - "dynamodb:GetRecords"
              - "dynamodb:GetShardIterator"
              - "dynamodb:ListStreams"
            Resource: !GetAtt GamesTable.Arn


  ReadScorePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Provide read access to the Score table
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:GetItem"
            Resource: !GetAtt ScoreTable.Arn


  WriteScorePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Provide read access to the Score table
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource: !GetAtt ScoreTable.Arn


Outputs:
  WebsiteURL:
    Value: !GetAtt WebBucket.WebsiteURL
    Description: URL for website hosted on S3
  WebsiteSecureURL:
    Value: !Sub "https://${WebBucket.DomainName}"
    Description: Secure URL for the website